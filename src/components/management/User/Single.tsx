import React from 'react';
import { api, type RouterOutputs } from '~/utils/api';
import { TableCell } from '../../ui/table';
import {
    Popover,
    PopoverTrigger,
    PopoverContent,
} from '~/components/ui/popover';
import { Button } from '../../ui/button';
import { defaultFormatDateTime } from '~/utils/dates';
import { useToast } from '~/components/ui/use-toast';
import Image from 'next/image';
import { MoreHorizontalIcon } from 'lucide-react';

export const Single: React.FC<{
    entity: RouterOutputs['user']['list']['values'][number];
    edit: (arg: string) => void;
    refetch: () => void;
}> = ({ entity, edit, refetch }) => {
    const resetPassword = api.user.resetPassword.useMutation();
    const suspend = api.user.suspend.useMutation();
    const delete_ = api.user.delete.useMutation();
    const { toast } = useToast();

    function successToast(description: string) {
        toast({
            title: '–£—Å–ø—ñ—Ö',
            description,
        });
    }

    async function resetPasswordHandler() {
        try {
            await resetPassword.mutateAsync(entity.id);
            successToast('–ü–∞—Ä–æ–ª—å —Å–∫–∏–Ω—É—Ç–æ');
        } catch (e) {
            console.error(e);
            toast({
                title: '–ü–æ–º–∏–ª–∫–∞',
                description:
                    e instanceof Error ? e.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                variant: 'destructive',
            });
        }
        void refetch();
    }

    async function suspendHandler() {
        try {
            await suspend.mutateAsync({
                id: entity.id,
                value: !entity.suspended,
            });
            successToast('–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ');
        } catch (e) {
            console.error(e);
            toast({
                title: '–ü–æ–º–∏–ª–∫–∞',
                description:
                    e instanceof Error ? e.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                variant: 'destructive',
            });
        }
        void refetch();
    }

    async function deleteHandler() {
        try {
            await delete_.mutateAsync(entity.id);
            successToast('–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ');
        } catch (e) {
            console.error(e);
            toast({
                title: '–ü–æ–º–∏–ª–∫–∞',
                description:
                    e instanceof Error ? e.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
                variant: 'destructive',
            });
        }
        void refetch();
    }

    return (
        <>
            <TableCell>
                <Image
                    className="rounded-full"
                    src={
                        entity.image ? entity.image : '/images/placeholder.svg'
                    }
                    alt={entity.name ?? '–ê–≤–∞—Ç–∞—Ä'}
                    width={32}
                    height={32}
                />
            </TableCell>
            <TableCell>{entity.id}</TableCell>
            <TableCell>{entity.email ?? 'üì≤'}</TableCell>
            <TableCell>{entity.name ?? 'üë§'}</TableCell>
            <TableCell>{defaultFormatDateTime(entity.createdAt)}</TableCell>
            <TableCell>{defaultFormatDateTime(entity.updatedAt)}</TableCell>
            <TableCell>{entity.reportCount}</TableCell>
            <TableCell>{entity.suspended ? '‚õî' : '‚úÖ'}</TableCell>
            <TableCell className="text-right">
                <Popover>
                    <PopoverTrigger asChild>
                        <Button size="icon" variant="ghost">
                            <MoreHorizontalIcon className="h-4 w-4" />
                            <span className="sr-only">–î—ñ—ó</span>
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="flex flex-col gap-2 transition-colors">
                        <Button onClick={() => edit(entity.id)}>
                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                        </Button>
                        <Button
                            variant="outline"
                            onClick={resetPasswordHandler}
                        >
                            –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å
                        </Button>
                        <Button variant="outline" onClick={suspendHandler}>
                            {entity.suspended ? '–£–≤—ñ–º–∫–Ω—É—Ç–∏' : '–í—ñ–¥–∫–ª—é—á–∏—Ç–∏'}{' '}
                            –∑–∞–ø–∏—Å
                        </Button>
                        <Button variant={'destructive'} onClick={deleteHandler}>
                            –í–∏–¥–∞–ª–∏—Ç–∏
                        </Button>
                    </PopoverContent>
                </Popover>
            </TableCell>
        </>
    );
};
