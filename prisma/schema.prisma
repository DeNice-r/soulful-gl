generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

// Auth-related models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  description   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Int       @default(0)
  isOnline      Boolean   @default(false)
  notes         String?
  password      String?

  // Auth-related relations
  accounts Account[]
  sessions Session[]

  // Chat-related relations
  userChat               Chat?          @relation(name: "userChat")
  personnelChats         Chat[]         @relation(name: "personnelChats")
  userArchivedChats      ArchivedChat[] @relation(name: "userArchivedChat")
  personnelArchivedChats ArchivedChat[] @relation(name: "personnelArchivedChat")

  // Content-related relations
  recommendations Recommendation[]
  posts           Post[]
  exercises       Exercise[]

  createdAt                  DateTime @default(now())
  latestStatusConfirmationAt DateTime @default(now())
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat-related models
model Chat {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  user        User      @relation(name: "userChat", fields: [userId], references: [id])
  userId      String    @unique
  personnel   User      @relation(name: "personnelChats", fields: [personnelId], references: [id])
  personnelId String
  messages    Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  text       String
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     Int
  isFromUser Boolean
  // user          User        @relation(fields: [userId],      references: [id])
  // userId        String
  // personnel     Personnel   @relation(fields: [personnelId], references: [id])
  // personnelId   String
}

model ArchivedChat {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime
  endedAt     DateTime          @default(now())
  user        User              @relation(name: "userArchivedChat", fields: [userId], references: [id])
  userId      String            @unique
  personnel   User              @relation(name: "personnelArchivedChat", fields: [personnelId], references: [id])
  personnelId String
  Message     ArchivedMessage[]
}

model ArchivedMessage {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime
  text       String
  chat       ArchivedChat @relation(fields: [chatId], references: [id])
  chatId     Int
  isFromUser Boolean
}

// Content-related models
model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique

  posts     Post[]
  exercises Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Recommendation {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  published Boolean @default(false)

  tags Tag[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Exercise {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  published Boolean @default(false)

  tags  Tag[]
  steps ExerciseStep[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ExerciseStep {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  backgroundPattern Int?
  timeSeconds       Int?

  exercises Exercise[]
}
