generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

// Auth-related models
model Account {
  id String @id @default(cuid())

  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Permission {
  id Int @id @default(autoincrement())

  title String @unique

  users User[]

  roles Role[]
}

model Role {
  id Int @id @default(autoincrement())

  title String @unique

  permissions Permission[]

  users User[]
}

model User {
  id String @id @default(cuid())

  name          String?   @default("Anonymous")
  description   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("/images/default_avatar.png")

  password String?

  notes String?

  // Chat availability
  busyness                   Int      @default(0)
  latestStatusConfirmationAt DateTime @default(now())
  perceivedOccupation        Int      @default(0)

  suspended Boolean @default(false)

  // Auth-related relations
  accounts    Account[]
  sessions    Session[]
  roles       Role[]
  permissions Permission[]

  // Chat-related relations
  userChat               Chat?          @relation(name: "userChat")
  personnelChats         Chat[]         @relation(name: "personnelChats")
  userArchivedChats      ArchivedChat[] @relation(name: "userArchivedChat")
  personnelArchivedChats ArchivedChat[] @relation(name: "personnelArchivedChat")

  // Content-related relations
  recommendations Recommendation[]
  posts           Post[]
  exercises       Exercise[]
  exerciseSteps   ExerciseStep[]

  // Private content
  documentFolders DocumentFolder[]
  documents       Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  id Int @id @default(autoincrement())

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat-related models
model Chat {
  id Int @id @default(autoincrement())

  createdAt   DateTime  @default(now())
  user        User      @relation(name: "userChat", fields: [userId], references: [id])
  userId      String    @unique
  personnel   User?     @relation(name: "personnelChats", fields: [personnelId], references: [id])
  personnelId String?
  messages    Message[]
}

model Message {
  id Int @id @default(autoincrement())

  createdAt  DateTime @default(now())
  text       String
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     Int
  isFromUser Boolean
  // user          User        @relation(fields: [userId],      references: [id])
  // userId        String
  // personnel     Personnel   @relation(fields: [personnelId], references: [id])
  // personnelId   String
}

model ArchivedChat {
  id Int @id @default(autoincrement())

  createdAt   DateTime
  endedAt     DateTime          @default(now())
  user        User              @relation(name: "userArchivedChat", fields: [userId], references: [id])
  userId      String
  personnel   User?             @relation(name: "personnelArchivedChat", fields: [personnelId], references: [id])
  personnelId String?
  messages    ArchivedMessage[]
}

model ArchivedMessage {
  id Int @id @default(autoincrement())

  createdAt  DateTime
  text       String
  chat       ArchivedChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     Int
  isFromUser Boolean
}

// Content-related models
model Tag {
  id Int @id @default(autoincrement())

  title String @unique

  posts           Post[]
  exercises       Exercise[]
  documents       Document[]
  documentFolders DocumentFolder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Recommendation {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  published Boolean @default(false)

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  published Boolean @default(false)

  tags Tag[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Exercise {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  published Boolean @default(false)

  tags  Tag[]
  steps ExerciseStep[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ExerciseStep {
  id String @id @default(cuid())

  title       String
  description String
  image       String?

  backgroundPattern Int?
  timeSeconds       Int?

  exercises Exercise[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model QandA {
  id Int @id @default(autoincrement())

  question String
  answer   String?

  authorEmail String
  authorName  String

  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Document {
  id String @id @default(cuid())

  folder   DocumentFolder? @relation(fields: [folderId], references: [id])
  folderId String?

  title       String
  description String
  image       String?

  tags Tag[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DocumentFolder {
  id String @id @default(cuid())

  title String

  documents Document[]

  tags Tag[]

  parentId String?
  parent   DocumentFolder?  @relation("FolderRelation", fields: [parentId], references: [id])
  folders  DocumentFolder[] @relation("FolderRelation")

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
